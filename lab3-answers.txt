<<<<<<< HEAD
Lockmanager:
we create structure LockProfile store txn id and lock type, and locksmanager maps the LockProfile.
Waitlist for logging whether the txn need to wait for other txn to finish its task.
LockProfile: data type stores tid, permission, because this two things decide the lock.
Waitlist: loggint pid and txn for impending processing of txn.
grantLock():
if tid has the read locks, it will return true.
if tid has the write locks or there is no lock, it will add lock(read) and return true
else if tid cannot add read lock on the pageid, it will return false.
Wait():it will check the lock can be inserted or not, if it cannot insert, we will add into waitlist
Unlock():
get the lockprofile from map, it will 
For both grant readlock or write lock follow the following behaviors:
Part1: There are four cases of single lock on page:
First, there is only one lock on the page, try to add readlock on it.
Check whether is our own lock. If it is mine and readlock return it.
Second, add new lock for accessing tid and return true.
Third, the lock is other's lock. Two condition if it is read lock, add lock and return. The other is the lock is write lock, waitlist to add lock.
               
Part2: There are four cases of multi lock on page:
1. two locks and belonging same tid(1 read and 1 write)=> do nothing
2. two locks and both are not belonging tid( 1read and 1 write)=> if it is write lock add to waitlist.
3. lots of readlocks, one of it is belonging tid.=> return true ,because do not need to add new lock.
4. lots of locks, and no one of it is belonging tid.=> add readlock on the pid


Deadlock dependent graph design(using in my simpleDB):
From the waitlist in the lockmanager, we can figure out all the lock that the specific tid hold. If it directly or related hold the lock , return the dead lock occur.
Deadlock timeout:
Set up the time for check the deadlock occur, however, if the condition that the two tids hold other's lock, the time out will not solve the problem. 
Therefore, dependency graph will be better than timeout

Bufferpool:
Evict policy(): it will check the dirty pages, if it is markdirty by txn. And, it will check whether the dirty pages are full in the buffpool.
If it is full, it will return error.

getPage(): First, it will try to get lock of the page, 
if it cannot grantlock , it will check whether deadlock occur. the thread.sleep use to control the check deadlock times.

Transactioncomplete(tid,commit): it will check all the dirty page in the bufferpool. If commit is true, it will flush the dirty page into database. 
=======
Lockmanager:
we create structure LockProfile store txn id and lock type, and locksmanager maps the LockProfile.
Waitlist for logging whether the txn need to wait for other txn to finish its task.
LockProfile: data type stores tid, permission, because this two things decide the lock.
Waitlist: loggint pid and txn for impending processing of txn.
grantLock():
if tid has the read locks, it will return true.
if tid has the write locks or there is no lock, it will add lock(read) and return true
else if tid cannot add read lock on the pageid, it will return false.
Wait():it will check the lock can be inserted or not, if it cannot insert, we will add into waitlist
Unlock():
get the lockprofile from map, it will 
For both grant readlock or write lock follow the following behaviors:
Part1: There are four cases of single lock on page:
First, there is only one lock on the page, try to add readlock on it.
Check whether is our own lock. If it is mine and readlock return it.
Second, add new lock for accessing tid and return true.
Third, the lock is other's lock. Two condition if it is read lock, add lock and return. The other is the lock is write lock, waitlist to add lock.
               
Part2: There are four cases of multi lock on page:
1. two locks and belonging same tid(1 read and 1 write)=> do nothing
2. two locks and both are not belonging tid( 1read and 1 write)=> if it is write lock add to waitlist.
3. lots of readlocks, one of it is belonging tid.=> return true ,because do not need to add new lock.
4. lots of locks, and no one of it is belonging tid.=> add readlock on the pid


Deadlock dependent graph design(using in my simpleDB):
From the waitlist in the lockmanager, we can figure out all the lock that the specific tid hold. If it directly or related hold the lock , return the dead lock occur.
Deadlock timeout:
Set up the time for check the deadlock occur, however, if the condition that the two tids hold other's lock, the time out will not solve the problem. 
Therefore, dependency graph will be better than timeout

Bufferpool:
Evict policy(): it will check the dirty pages, if it is markdirty by txn. And, it will check whether the dirty pages are full in the buffpool.
If it is full, it will return error.

getPage(): First, it will try to get lock of the page, 
if it cannot grantlock , it will check whether deadlock occur. the thread.sleep use to control the check deadlock times.

Transactioncomplete(tid,commit): it will check all the dirty page in the bufferpool. If commit is true, it will flush the dirty page into database. 
>>>>>>> c7b7e7809c3842d4b5801f79b97fffc728a6b0d8
If abort, it will rollback to the latest frame.